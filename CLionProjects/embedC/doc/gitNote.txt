命令:

commit:
    1.暂存当前数据到一个新的节点上
    2.实际上存放的是当前节点和上一个节点的修改
    3.每个节点指向其父节点

branch:
    1. 创建一个新的分支，其实就是简单的指向某个提交记录，不会造成内存上的开销

merge:  git merge feature
    1. 将两个分支合并，并且创建一个新的节点(提交记录)，这个分节点有两个父节点
    2. merge后当前分支将会指向merge后的分支
    3. merge后面的参数是要合并进来的分支

rebase: git rebase master
    1. rebase 将复制当前节点(及父节点)到 master分支节点后面，旧分支依然存在
    2. 新创建的节点的父节点是master指向节点
    3. 当前分支指向了新节点，在master分支之后
    4. 使用git rebase feature 可以将master分支和feature同步

HEAD: git checkout master;git checkout 节点名/节点哈希值、节点哈希值前4位;
      git checkout master^;讲HEAD指向master分支的上一个节点；git checkout HEAD^;
      GIT checkout HEAD~4，将HEAD往上移动四个节点
    1. 是对当前检出记录的一个符号引用，也就是指向正在工作的提交记录
    2. HEAD可以指向分支，也可以直接指向某个节点(提交记录)，此时被称为分离HEAD
    3. 移动分支 git branch -f master HEAD~3   将master分支强制指向HEAD的3级父分支

reset:
    1. 通过把分支记录回退几个提交记录来实现撤销改动   git reset HEAD~ 后退一个节点(提交记录)
    2. 对远程分支无效
revert: git revert HEAD
    1. 通过将你的撤销操作新生成一个节点，这个节点的数据和撤销之前是一致的
    2. 当前分支实际上是前进了一个节点
